<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>isnowify&#39;s blog</title>
  
  <subtitle>Yet another ordinary site</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.isnowify.com/"/>
  <updated>2020-09-29T17:06:48.088Z</updated>
  <id>http://www.isnowify.com/</id>
  
  <author>
    <name>isnowify</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>An Uncomplete Guide For Java Beginner</title>
    <link href="http://www.isnowify.com/2020/09/30/an-uncomplete-guide-for-java-beginner/"/>
    <id>http://www.isnowify.com/2020/09/30/an-uncomplete-guide-for-java-beginner/</id>
    <published>2020-09-29T16:58:03.000Z</published>
    <updated>2020-09-29T17:06:48.088Z</updated>
    
    <content type="html"><![CDATA[<h2 id="basic-terminology">Basic Terminology</h2><ul><li><strong>Program</strong> – a sequence of instructions (called statements), which are executed one after another in a predictable manner. Sequential flow is the most common and straightforward sequence of statements, in which statements are executed in the order that they are written – from top to bottom in a sequential manner;</li><li><strong>Statement</strong> – a single action (like print a text) terminated by semi-colon (<code>;</code>);</li><li><strong>Block</strong> – a group of zero, one or more statements enclosed by a pair of braces <code>{...}</code>; There are two such blocks in the program above.</li><li><strong>Method</strong> – a sequence of statements that represents a high-level operation (also known as subprogram or procedure).</li><li><strong>Syntax</strong> – a set of rules that define how a program needs to be written in order to be valid; Java has its own specific syntax that we will learn;</li><li><strong>Keyword</strong> – a word that has a special meaning in the programming language (<code>public</code>, <code>class</code>, and many others). These words cannot be used as variable names for your own program;</li><li><strong>Identifier or name</strong> – a word that refers to something in a program (such as a variable or a function name);</li><li><strong>Comment</strong> – a textual explanation of what the code does. Java comments start with <code>//</code>.</li><li><strong>Whitespace</strong> – all characters that are not visible (space, tab, newline, etc.).</li></ul><h3 id="what-do-matter-...">What Do Matter ...</h3><ul><li><strong>Public Class </strong>: A class can <strong>have any name</strong>, such as <code>App</code>, <code>Main</code>, or <code>Program</code>, but it <strong>must not start with a digit</strong>. A set of braces <code>{...}</code> encloses the body of a class.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Main Method</strong> : we put a method named <code>main</code> inside a class. It is the entry point for a Java program. The name of this method (<code>main</code>) is predefined and <strong>should always be the same</strong>.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// statements go here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Print</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"Hello, World!"</span>); <span class="comment">//  each statement has to end with ;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Keyword</strong> : <a href="https://en.wikipedia.org/wiki/List_of_Java_keywords" class="uri" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/List_of_Java_keywords</a></li></ul><h3 id="printing-data-...">Printing Data ...</h3><ul><li><p>The <code>println</code> method displays the passed <strong><em>string</em></strong> <strong>followed by a new line</strong> on the screen (<strong>print-line</strong>).</p></li><li><p><strong>Print an empty line</strong>:</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(); <span class="comment">// prints empty line</span></span><br></pre></td></tr></table></figure><ul><li>The <code>print</code> method displays the passed <strong><em>value</em></strong> and places the cursor (the position where we display a value) after it. As an example, the code below <strong>outputs all strings in a single line</strong>.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.print(<span class="string">"I "</span>);</span><br><span class="line">System.out.print(<span class="string">"know "</span>);</span><br><span class="line">System.out.print(<span class="string">"Java "</span>);</span><br><span class="line">System.out.print(<span class="string">"well."</span>);</span><br></pre></td></tr></table></figure><h3 id="declaring-and-initializing">Declaring and initializing</h3><ul><li><p><strong>Declaration</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataType variableName = initialization</span><br></pre></td></tr></table></figure></li><li><p>The <strong>type (</strong>or <strong>data type)</strong> of a variable determines what possible operations can be performed on the variable and which values can be stored in it. Here we use a non-existing data type (<strong>DataType</strong>) to demonstrate the general form of declaration.</p></li><li><p>The <strong>name (</strong>or <strong>identifier)</strong> distinguishes the variable from others. The name of a variable cannot start with a digit; it usually starts with a letter. Always try to choose meaningful and readable names for variables to make your code easy to understand.</p></li><li><p>The <strong>assignment</strong> <strong>operator</strong> denoted as <code>=</code> is used to assign a single value or a result of an expression to a variable.</p></li><li><p>The <strong>initialization</strong> is a value or a result of an expression that is assigned to the variable.</p><p><em>Some Examples:</em></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String language = <span class="string">"java"</span>;</span><br><span class="line"><span class="keyword">int</span> numberOfApples = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><hr><ul><li><p><strong>Accessing the value of a variable</strong></p><p>you can only assign a value of the same type as the type of the initial variable.</p></li><li><p><strong>Alternative forms of declaration</strong></p><ul><li><p>Declaring several variables of the same type as a single statement:</p><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String language = <span class="string">"java"</span>, version = <span class="string">"8 or newer"</span>;</span><br></pre></td></tr></table></figure></p></li><li><p>Separating declaration and initialization into statements: <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age; <span class="comment">// declaration</span></span><br><span class="line">age = <span class="number">35</span>; <span class="comment">// initialization</span></span><br></pre></td></tr></table></figure></p></li></ul></li><li><p><strong>What's new?</strong></p><ul><li><p>Type inference</p><p>Since Java 10, you can write <strong>var</strong> instead of a specific type to force automatic type inference based on the type of assigned value:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> variableName = initialization;</span><br></pre></td></tr></table></figure><p>Here are two examples below:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> language = <span class="string">"Java"</span>; <span class="comment">// String</span></span><br><span class="line"><span class="keyword">var</span> version = <span class="number">10</span>; <span class="comment">// int</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="comments">Comments</h3><ul><li><p><strong>End-of-line comments</strong></p><p>The java compiler ignores any text from <code>//</code> to the end of the line.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Program</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// The line below will be ignored</span></span><br><span class="line">        <span class="comment">// System.out.println("Hello, World");</span></span><br><span class="line">        <span class="comment">// It prints the string "Hello, Java"</span></span><br><span class="line">        System.out.println(<span class="string">"Hello, Java"</span>); <span class="comment">// Here can be any comment</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Multi-line comments</strong></p></li></ul><p>The compiler ignores any text from <code>/*</code> and the nearest <code>*/</code>. It can be used as multiple and single-line comments.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Program</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/* This is a single-line comment */</span></span><br><span class="line">        <span class="comment">/*  This is an example of</span></span><br><span class="line"><span class="comment">            a multi-line comment */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="naming">Naming</h3><ul><li>names are case-sensitive;</li><li>a name can include <a href="https://en.wikipedia.org/wiki/Unicode" target="_blank" rel="noopener">Unicode</a> letters, digits, and two special characters (<code>$</code>, <code>_</code>);<ul><li>Since Java 9 the single character <code>_</code> is an invalid name for a variable, but<code>_a</code> and <code>__</code> (double <code>_</code> ) are legal names.</li></ul></li><li>a name cannot start with a digit;</li><li>a name must not be a keyword (<code>class</code>, <code>static</code>, <code>int</code> are illegal names).</li></ul><p><code>Note that to keep backward compatibility the word "var" can be used as a variable name even after Java 10 was released.</code></p><ul><li>if a variable name is a single word it should be in lowercase (for instance: <code>number</code>, <code>price</code>);</li><li>if a variable name includes multiple words it should be in <code>lowerCamelCase</code>, i.e. the first word should be in lowercase and each word after the first should have its first letter written in uppercase (for instance: <code>numberOfCoins</code>);</li><li>variable names should not start with <code>_</code> and <code>$</code> characters, although they are allowed;</li><li>choose a name that makes sense, e.g. <code>score</code> makes more sense than <code>s</code>, although they are both valid.</li></ul><h2 id="standard-input-scanner">Standard Input (Scanner)</h2><ul><li><strong>Read single-line input</strong></li></ul><p>The simplest way to obtain data from the standard input is to use the standard class <strong><code>Scanner</code></strong>. It allows a program to read values of different types (string, numbers, etc) from the standard input.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br></pre></td></tr></table></figure><blockquote><p>Do not forget the <code>;</code> in the end of thois Statement</p></blockquote><p>Then construct an object of <code>Scanner</code> class.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure><p>To read the input data, use:</p><ul><li><p><code>scanner.next()</code> for a single word or an integer number (<em>will read the input till the whitespace</em>)</p></li><li><p><code>scanner.nextLine()</code> for any string with whitespace, tab,non-printing characters or whatever</p><p><em>Input will be processed as <strong>string</strong></em></p></li><li><p><strong>Read multiline input</strong></p><p><code>nextLine()</code> will read input from the position of the cursor till the new line (and again, if there is such a line in your input). If there is no anything left to read in the current line, the <code>nextLine()</code> method will return an empty line ("") and place the cursor at the beginning of a new line.</p></li></ul><p>For example, the content below will be processed by Java like this:</p><p>Content:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|This is a simple</span><br><span class="line"></span><br><span class="line">multiline input,</span><br><span class="line"></span><br><span class="line">that is being read</span><br></pre></td></tr></table></figure><p>Code: <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);  </span><br><span class="line"></span><br><span class="line">        String word1 = scanner.next(); <span class="comment">// "This"</span></span><br><span class="line">        String line1 = scanner.nextLine(); <span class="comment">// " is a simple" </span></span><br><span class="line">        String word2 = scanner.next(); <span class="comment">// "multiline"</span></span><br><span class="line">        String word3 = scanner.next(); <span class="comment">// "input,"</span></span><br><span class="line">        String line2 = scanner.nextLine(); <span class="comment">// "" </span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="arithmetic-operations">Arithmetic operations</h2><ul><li><strong>Binary arithmetic operators</strong><ul><li>addition <code>+</code></li><li>subtraction <code>-</code></li><li>multiplication <code>*</code></li><li>integer division <code>/</code></li><li>remainder <code>%</code></li></ul></li></ul><p>The <code>/</code> operator returns the integer part of the division of two integer numbers, and any fractional part is discarded.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">8</span> / <span class="number">3</span>); <span class="comment">// prints 2</span></span><br><span class="line">System.out.println(<span class="number">41</span> / <span class="number">5</span>); <span class="comment">// prints 8</span></span><br></pre></td></tr></table></figure><p>The <code>%</code> returns the remainder of the division of two numbers. When the dividend is less than the divisor, the quotient is zero and the remainder equals the dividend.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">10</span> % <span class="number">3</span>) <span class="comment">// prints 1, because 10 divided by 3 leaves a remainder of 1</span></span><br><span class="line">System.out.println(<span class="number">12</span> % <span class="number">4</span>) <span class="comment">// prints 0, because 12 divided by 4 leaves no remainder</span></span><br><span class="line">System.out.println(<span class="number">5</span> % <span class="number">9</span>) <span class="comment">// prints 5, because 5 divided by 9 leaves a remainder of 5</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>Unary operators</strong></p><ul><li>The <strong>unary plus</strong> operator indicates a positive value. It's an optional operator.</li></ul><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(+<span class="number">5</span>); <span class="comment">// prints 5</span></span><br></pre></td></tr></table></figure></p><ul><li>The <strong>unary minus</strong> operator negates a value or an expression.</li></ul><p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(-<span class="number">8</span>);  <span class="comment">// prints -8</span></span><br><span class="line">System.out.println(-(<span class="number">100</span> + <span class="number">4</span>)); <span class="comment">// prints -104</span></span><br></pre></td></tr></table></figure></p></li><li><p><strong>Precedence Order</strong></p><ul><li>parentheses</li><li>unary plus/minus</li><li>multiplication, division</li><li>addition, subtraction</li></ul></li></ul><h2 id="integer-types-and-operations">Integer types and operations</h2><p>If a number ends with the letter <code>L</code> or <code>l</code> it is considered as <code>long</code>, otherwise, it is <code>int</code>. It is recommended to use the uppercase letter <code>L</code>.</p><p>Use <code>=</code>, <code>/=</code>, <code>%=</code> <code>+=</code> to make operation concise</p><ul><li><p>Read numbers from standard input</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> a = scanner.nextInt();</span><br><span class="line">        <span class="keyword">int</span> b = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = a + b;</span><br><span class="line"></span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>long</code> can be used in replace of <code>int</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> a = scanner.nextLong();</span><br><span class="line"><span class="keyword">long</span> b = scanner.nextLong();</span><br><span class="line"><span class="keyword">long</span> sum = a + b;</span><br></pre></td></tr></table></figure></li></ul><h2 id="increment-and-decrement">Increment and decrement</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line">n++; <span class="comment">// 11</span></span><br><span class="line">n--; <span class="comment">// 10</span></span><br><span class="line"><span class="comment">//------------//</span></span><br><span class="line"> <span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line">n += <span class="number">1</span>; <span class="comment">// 11</span></span><br><span class="line">n -= <span class="number">1</span>; <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>prefix</strong> (<code>++n</code> or <code>--n</code>) increases/decreases the value of a variable before it is used;</p></li><li><p><strong>postfix</strong> (<code>n++</code> or <code>n--</code>) increases/decreases the value of a variable after it is used.</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> b = ++a;</span><br><span class="line"><span class="comment">// ++a = a = 5</span></span><br><span class="line">System.out.println(a); <span class="comment">// 5</span></span><br><span class="line">System.out.println(b); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><blockquote><p>The value of a has been <strong>incremented</strong> and <strong>then assigned</strong> to b. So, b is 5.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> b = a++;</span><br><span class="line"><span class="comment">// a++ = 4; a = 5</span></span><br><span class="line">System.out.println(a); <span class="comment">// 5</span></span><br><span class="line">System.out.println(b); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Postfix</strong> operator has <em>higher precedence</em> than the <strong>assignment operator</strong>.</p></blockquote><p>When assigning <code>a++</code> to <code>b</code>, we actually assign 4, while <code>a</code> itself has already been incremented. So, <code>b</code> is 4 and <code>a</code> is 5.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">4</span>;</span><br><span class="line">System.out.println(a++ + a); <span class="comment">// this is 9</span></span><br></pre></td></tr></table></figure><h2 id="characters">Characters</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> lowerCaseLetter = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">char</span> upperCaseLetter = <span class="string">'Q'</span>;</span><br><span class="line"><span class="keyword">char</span> number = <span class="string">'1'</span>;</span><br><span class="line"><span class="keyword">char</span> space = <span class="string">' '</span>;</span><br><span class="line"><span class="keyword">char</span> dollar = <span class="string">'$'</span>;</span><br></pre></td></tr></table></figure><ul><li><p><strong>Initializing with unicode</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch = <span class="string">'\u0040'</span>; <span class="comment">// it represents '@'</span></span><br><span class="line">System.out.println(ch); <span class="comment">// @</span></span><br></pre></td></tr></table></figure><p>Any <code>char</code> variable may be considered as an unsigned integer value in the range from 0 to 65535.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch = <span class="number">64</span>;</span><br><span class="line">System.out.println(ch); <span class="comment">// @</span></span><br></pre></td></tr></table></figure></li><li><p><strong>Subsequent characters</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch = <span class="string">'b'</span>;</span><br><span class="line">ch += <span class="number">1</span>; <span class="comment">// 'c'</span></span><br><span class="line">ch -= <span class="number">2</span>; <span class="comment">// 'a'</span></span><br><span class="line"><span class="comment">// --------------------- //</span></span><br><span class="line"><span class="keyword">char</span> ch = <span class="string">'A'</span>;</span><br><span class="line">ch += <span class="number">10</span>;</span><br><span class="line">System.out.println(ch);   <span class="comment">// 'K'</span></span><br><span class="line">System.out.println(++ch); <span class="comment">// 'L'</span></span><br><span class="line">System.out.println(++ch); <span class="comment">// 'M'</span></span><br><span class="line">System.out.println(--ch); <span class="comment">// 'L'</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>Escape sequences</strong></p><ul><li><code>'\n'</code> is the newline character;</li><li><code>'\t'</code> is the tab character;</li><li><code>'\r'</code> is the carriage return character;</li><li><code>'\\'</code> is the backslash character itself;</li><li><code>'\''</code> is the single quote mark;</li><li><code>'\"'</code> is the double quote mark.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">System.out.print(<span class="string">'\t'</span>); <span class="comment">// makes a tab</span></span><br><span class="line">System.out.print(<span class="string">'a'</span>);  <span class="comment">// prints 'a'</span></span><br><span class="line">System.out.print(<span class="string">'\n'</span>); <span class="comment">// goes to the new line</span></span><br><span class="line">System.out.print(<span class="string">'c'</span>);  <span class="comment">// prints 'c'</span></span><br></pre></td></tr></table></figure><p>Code above will be phrased as :</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  a</span><br><span class="line">c</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="string">String</h2><ul><li><p><strong>immutable type</strong>: it's <strong><em>impossible</em></strong> to change a character in a string;</p></li><li><p>it has methods for getting individual characters and extracting substrings;</p></li><li><p>individual characters can be accessed by indexes, the first character has the index <strong>0</strong>, the last one – <strong>the length of the string</strong> – <strong>1</strong>;</p></li><li><p>non-primitive type.</p></li><li><p>A string can be <code>null</code>. It means no value assigned.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String nullString = <span class="keyword">null</span>; <span class="comment">// it is null</span></span><br></pre></td></tr></table></figure></li><li><p>Another way to create a variable of String is by using the keyword new.</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="keyword">new</span> String(<span class="string">"my-string"</span>); <span class="comment">// it creates an object and assigns it to the variable</span></span><br></pre></td></tr></table></figure><h3 id="methods">Methods</h3><p>Documentation <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html" target="_blank" rel="noopener">here</a>.</p><p>Any string has two useful methods:</p><ul><li><code>length()</code> returns the number of characters in the string;</li><li><code>charAt(int index)</code> returns a character by its index;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"Hi, all"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = s.length(); <span class="comment">// the len is 7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> theFirstChar = s.charAt(<span class="number">0</span>);  <span class="comment">// 'H' has the index 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> theFifthChar = s.charAt(<span class="number">4</span>); <span class="comment">// 'a' has the index 4</span></span><br></pre></td></tr></table></figure><ul><li><code>isEmpty()</code> returns <code>true</code> if the string is empty, otherwise – <code>false</code>;</li><li><code>toUpperCase()</code> returns a new string in uppercase;</li><li><code>toLowerCase()</code> returns a new string in lowercase;</li><li><code>startsWith(prefix)</code> returns <code>true</code> if the string starts with the given string prefix, otherwise, <code>false</code>;</li><li><code>endsWith(suffix)</code> returns <code>true</code> if the string ends with the given string suffix, otherwise, <code>false</code>.</li><li><code>contains(...)</code> returns <code>true</code> if the string contains the given string or character;</li><li><code>substring(beginIndex, endIndex)</code> returns a substring of the string in the range: <code>beginIndex</code>, <code>endIndex - 1</code>;</li><li><code>replace(old, new)</code> returns a new string obtained by replacing all occurrences of <code>old</code> with <code>new</code> that can be chars or strings.</li><li><code>trim()</code> returns a copy of the string obtained by omitting the leading and trailing whitespace. Note that whitespace includes not only space character, but mostly everything that looks empty: tab, carriage return, newline character, etc.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String text = <span class="string">"The simple text string"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> empty = text.isEmpty(); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">String textInUpperCase = text.toUpperCase(); <span class="comment">// "THE SIMPLE TEXT STRING"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> startsWith = textInUpperCase.startsWith(<span class="string">"THE"</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* replace all whitespaces with empty strings */</span></span><br><span class="line">String noWhitespaces = textInUpperCase.replace(<span class="string">" "</span>, <span class="string">""</span>); <span class="comment">// "THESIMPLETEXTSTRING"</span></span><br><span class="line"></span><br><span class="line">String textWithWhitespaces = <span class="string">"\t text with whitespaces   !\n  \t"</span>;</span><br><span class="line"></span><br><span class="line">String trimmedText = textWithWhitespaces.trim(); <span class="comment">// "text with whitespaces   !"</span></span><br></pre></td></tr></table></figure><h3 id="concatenation">Concatenation</h3><p>Two strings can be concatenated using the "+" operator or the <code>concat</code> method.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String firstName = <span class="string">"John"</span>;</span><br><span class="line">String lastName = <span class="string">"Smith"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// concatenation using the "+" operator</span></span><br><span class="line">String fullName1 = firstName + <span class="string">" "</span> + lastName; <span class="comment">// "John Smith"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// concatenation using the concat method </span></span><br><span class="line">String fullName2 = firstName.concat(<span class="string">" "</span>).conc</span><br></pre></td></tr></table></figure><h3 id="append">Append</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"str"</span> + <span class="number">10</span> + <span class="keyword">false</span>; <span class="comment">// the result is "str10false"</span></span><br><span class="line"><span class="comment">// Will be converted into String</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String shortString = <span class="string">"str"</span>;</span><br><span class="line"><span class="keyword">int</span> number = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">String result1 = shortString + number + <span class="number">50</span>; <span class="comment">// the result is "str10050"</span></span><br><span class="line">String result2 = number + <span class="number">50</span> + shortString; <span class="comment">// the result is "150str"</span></span><br></pre></td></tr></table></figure><h3 id="compare">Compare</h3><blockquote><p>only addresses will be compared, but not actual values.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String first = <span class="string">"first"</span>;</span><br><span class="line">String second = <span class="string">"second"</span>;</span><br><span class="line"></span><br><span class="line">String anotherFirst = <span class="string">"first"</span>;</span><br><span class="line">String secondInUpperCase = <span class="string">"SECOND"</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(first.equals(second)); <span class="comment">// false, the strings have different values</span></span><br><span class="line">System.out.println(first.equals(anotherFirst)); <span class="comment">// true, the strings have the same value</span></span><br><span class="line"></span><br><span class="line">System.out.println(second.equals(secondInUpperCase)); <span class="comment">// false, the strings have different cases</span></span><br><span class="line">System.out.println(second.equalsIgnoreCase(secondInUpperCase)); <span class="comment">// true, it ignores cases</span></span><br></pre></td></tr></table></figure><h2 id="logical-operators">Logical operators</h2><ul><li><strong>NOT</strong> is a unary operator that reverses the Boolean value. It is denoted as <code>!</code>.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> f = <span class="keyword">false</span>; <span class="comment">// f is false</span></span><br><span class="line"><span class="keyword">boolean</span> t = !f;    <span class="comment">// t is true</span></span><br></pre></td></tr></table></figure><ul><li><strong>AND</strong> is a binary operator that returns <code>true</code> if both operands are <code>true</code>, otherwise, it is <code>false</code>. It is denoted as <code>&amp;&amp;</code>.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> b1 = <span class="keyword">false</span> &amp;&amp; <span class="keyword">false</span>; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">boolean</span> b2 = <span class="keyword">false</span> &amp;&amp; <span class="keyword">true</span>;  <span class="comment">// false</span></span><br><span class="line"><span class="keyword">boolean</span> b3 = <span class="keyword">true</span> &amp;&amp; <span class="keyword">false</span>;  <span class="comment">// false</span></span><br><span class="line"><span class="keyword">boolean</span> b4 = <span class="keyword">true</span> &amp;&amp; <span class="keyword">true</span>;   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><strong>OR</strong> is a binary operator that returns <code>true</code> if at least one operand is <code>true</code>, otherwise, it returns <code>false</code>. It is denoted as <code>||</code>.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> b1 = <span class="keyword">false</span> || <span class="keyword">false</span>; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">boolean</span> b2 = <span class="keyword">false</span> || <span class="keyword">true</span>;  <span class="comment">// true</span></span><br><span class="line"><span class="keyword">boolean</span> b3 = <span class="keyword">true</span> || <span class="keyword">false</span>;  <span class="comment">// true</span></span><br><span class="line"><span class="keyword">boolean</span> b4 = <span class="keyword">true</span> || <span class="keyword">true</span>;   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><strong>XOR</strong> (<strong>exclusive OR</strong>) is a binary operator that returns <code>true</code> if boolean operands <strong><em>have different values</em></strong>, otherwise, it is <code>false</code>.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> b1 = <span class="keyword">false</span> ^ <span class="keyword">false</span>; <span class="comment">// false</span></span><br><span class="line"><span class="keyword">boolean</span> b2 = <span class="keyword">false</span> ^ <span class="keyword">true</span>;  <span class="comment">// true</span></span><br><span class="line"><span class="keyword">boolean</span> b3 = <span class="keyword">true</span> ^ <span class="keyword">false</span>;  <span class="comment">// true</span></span><br><span class="line"><span class="keyword">boolean</span> b4 = <span class="keyword">true</span> ^ <span class="keyword">true</span>;   <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>The <strong>XOR</strong> operator is used less often than others. Just remember that Java has it. If you really need it, you can use it.</p><blockquote><p>Priority: <code>!</code> (NOT) &gt; <code>^</code> (XOR) &gt; <code>&amp;&amp;</code> (AND) &gt; <code>||</code> (OR).</p></blockquote><h2 id="relational-operators">Relational operators</h2><ul><li><code>==</code> (equal to)</li><li><code>!=</code> (not equal to)</li><li><code>&gt;</code> (greater than)</li><li><code>&gt;=</code> (greater than or equal to)</li><li><code>&lt;</code> (less than)</li><li><code>&lt;=</code> (less than or equal to)</li></ul><blockquote><p>Priority: Logical operators &lt; Relational operators &lt; arithmetic operators.</p></blockquote><h2 id="conditional-statement">Conditional Statement</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (b) &#123; <span class="comment">// or !b  (Condiction in the bracket is true)</span></span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ternary-operator">Ternary operator</h2><p>Conditional Statement:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = ...;</span><br><span class="line"><span class="keyword">int</span> b = ...;</span><br><span class="line"><span class="keyword">int</span> max = ...;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">    max = a;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    max = b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Ternary Operator:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> max = a &gt; b ? a : b;</span><br></pre></td></tr></table></figure><p>that is to say:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = condition ? trueCase : elseCase;</span><br></pre></td></tr></table></figure><p>Another sample to judge even or odd number:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = ...;  <span class="comment">// it's initialized by a value</span></span><br><span class="line">System.out.println(num % <span class="number">2</span> == <span class="number">0</span> ? <span class="string">"even"</span> : <span class="string">"odd"</span>);</span><br></pre></td></tr></table></figure><h2 id="for-loop">For-loop</h2><p>Basic framework:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (initialization; condition; modification) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li><strong>initialization statement</strong> is executed once before the loop begins; usually, loop variables are initialized here;</li><li><strong>condition</strong> is a Boolean expression that determines the need for the next iteration; if it's <code>false</code>, the loop terminates;</li><li><strong>modification</strong> is a statement that changes the value of the loop variables; it is <strong><em>invoked after each iteration</em></strong> of the loop; usually, it uses <strong>increment or</strong> <strong>decrement</strong> to modify the loop's variable.</li></ul></blockquote><p>it is also possible to write an infinite loop without these parts at all:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>An example...</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">        System.out.print(i * j + <span class="string">"\t"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Which will print:</p><blockquote><p>1 2 3 4 5 6 7 8 9 2 4 6 8 10 12 14 16 18 3 6 9 12 15 18 21 24 27 4 8 12 16 20 24 28 32 36 5 10 15 20 25 30 35 40 45 6 12 18 24 30 36 42 48 54 7 14 21 28 35 42 49 56 63 8 16 24 32 40 48 56 64 72 9 18 27 36 45 54 63 72 81</p></blockquote><h2 id="switch-statement">Switch Statement</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (variable) &#123;</span><br><span class="line">    <span class="keyword">case</span> value1:</span><br><span class="line">        <span class="comment">// do something here</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value2:</span><br><span class="line">        <span class="comment">// do something here</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//... other cases</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">case</span> valueN:</span><br><span class="line">        <span class="comment">// do something here</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// do something by default</span></span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// it can be omitted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>An example: </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> val = ...;</span><br><span class="line"><span class="keyword">switch</span> (val) &#123;</span><br><span class="line">     <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">         System.out.println(<span class="string">"zero"</span>);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">         System.out.println(<span class="string">"one"</span>);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">         System.out.println(<span class="string">"two"</span>);</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">         System.out.println(<span class="string">"The value is less than zero or greater than two"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It is highly recommended to add a <code>break</code> after each case.</p><p>If a case meets the according condition, the following case will be executed directly from the entry point without judgement</p><p>Since Java 14, switch can be treated as an expression, returning a value from the statement. To achieve that a new switch<strong>-</strong>related keyword <strong>yield</strong> was introduced which works as a <strong>return</strong> statement.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> count = <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"Monday"</span>:</span><br><span class="line">        yield <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"Tuesday"</span>:</span><br><span class="line">        yield <span class="number">2</span>;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        yield -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="unit-of-information">Unit of information</h2><p>The smallest unit of information is the <strong>bit</strong> <strong>(b)</strong>. <code>1</code> and <code>0</code>.</p><p>A <strong>byte</strong> <strong>(B)</strong> means <strong>8 bits</strong></p><p><strong>bit numbers</strong> use the lowercase letter <strong>"b"</strong> while the <strong>bytes</strong> are capital <strong>"B"</strong>.</p><table><thead><tr class="header"><th><strong>SI metric</strong></th><th><strong>Symbol</strong></th><th><strong>Powers of ten</strong></th><th><strong>IEC metric</strong></th><th><strong>Symbol</strong></th><th><strong>Powers of two</strong></th></tr></thead><tbody><tr class="odd"><td>Kilobyte</td><td>kB</td><td>10^3 B (1000 B)</td><td>Kibibyte</td><td>KiB</td><td>2^10 B (or 1024 B)</td></tr><tr class="even"><td>Megabyte</td><td>MB</td><td>10^6 B (1000 kB)</td><td>Mebibyte</td><td>MiB</td><td>2^20 B (or 1024 KiB)</td></tr><tr class="odd"><td>Gigabyte</td><td>GB</td><td>10^9 B (1000 MB)</td><td>Gibibyte</td><td>GiB</td><td>2^30 B (or 1024 MiB)</td></tr><tr class="even"><td>Terabyte</td><td>TB</td><td>10^12 B (1000 GB)</td><td>Tebibyte</td><td>TiB</td><td>2^40 B (or 1024 GiB)</td></tr><tr class="odd"><td>Petabyte</td><td>PB</td><td>10^15 B (1000 TB)</td><td>Pebibyte</td><td>PiB</td><td>2^50 B (or 1024 TiB)</td></tr></tbody></table><h3 id="datatype-in-java-number">Datatype in Java (number)</h3><ul><li><code>byte</code>: size 8 bits (1 byte), range from -128 to 127</li><li><code>short</code>: size 16 bits (2 bytes), range from -32768 to 32767</li><li><code>int</code>: size 32 bits (4 bytes), range from −(231) to (231)−1</li><li><code>long</code>: size 64 bits (8 bytes), range from −(263) to (263)−1</li><li><strong>Floating-point types</strong>： <code>double</code> (64 bits) and <code>float</code> (32 bits).</li></ul><p>Note, that when we declare and initialize a <code>float</code> variable, we should mark the assigned value with the special letter <strong>f</strong>. It is often a good practice to mark a <code>long</code> value with <strong>l</strong> as well.</p><h2 id="casting">Casting</h2><h3 id="implicit-casting">Implicit casting</h3><p>Transformation will be automatically completed by compiler and there is no loss <strong>in most cases</strong> when transforming.</p><p>The direction of implicit casting:</p><figure><img alt="img" data-src="https://ucarecdn.com/c00fb67e-ba08-44a2-ad8b-0ffbdfe8d642/"><figcaption aria-hidden="true">img</figcaption></figure><ul><li>from <code>int</code> to <code>long</code>:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">long</span> bigNum = num; <span class="comment">// 100L</span></span><br></pre></td></tr></table></figure><ul><li>from <code>long</code> to <code>double</code>:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> bigNum = <span class="number">100_000_000L</span>;</span><br><span class="line"><span class="keyword">double</span> bigFraction = bigNum; <span class="comment">// 100000000.0</span></span><br></pre></td></tr></table></figure><ul><li>from <code>short</code> to <code>int</code>:</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">short</span> shortNum = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> num = shortNum; <span class="comment">// 100</span></span><br></pre></td></tr></table></figure><ul><li>from <code>char</code> to <code>int</code>: (Will get the ASCII code of the according character)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch = <span class="string">'?'</span>;</span><br><span class="line"><span class="keyword">int</span> code = ch; <span class="comment">// 63</span></span><br></pre></td></tr></table></figure><p>However, the <strong>loss</strong> could exist in some cases: <code>int</code> to <code>float</code>, or a <code>long</code> to <code>float</code> nor to <code>double</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> bigLong =  <span class="number">1_200_000_002L</span>;</span><br><span class="line"><span class="keyword">float</span> bigFloat = bigLong; <span class="comment">// 1.2E9 (= 1_200_000_000)</span></span><br></pre></td></tr></table></figure><h3 id="explicit-casting">Explicit casting</h3><p>Usage:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(targetType) source</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> d = <span class="number">2.00003</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// it loses the fractional part</span></span><br><span class="line"><span class="keyword">long</span> l =  (<span class="keyword">long</span>) d; <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// requires explicit casting because long is wider than int</span></span><br><span class="line"><span class="keyword">int</span> i = (<span class="keyword">int</span>) l; <span class="comment">// 2 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// requires explicit casting because the result is long (indicated by L)</span></span><br><span class="line"><span class="keyword">int</span> val = (<span class="keyword">int</span>) (<span class="number">3</span> + <span class="number">2L</span>); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// casting from a long literal to char</span></span><br><span class="line"><span class="keyword">char</span> ch = (<span class="keyword">char</span>) <span class="number">55L</span>; <span class="comment">// '7'</span></span><br></pre></td></tr></table></figure><h2 id="branching-statements">Branching Statements</h2><h3 id="break-statement"><code>Break</code> Statement</h3><ul><li>it terminates the current loop of any type (<strong>for</strong>, <strong>while</strong>, <strong>do-while</strong>);</li><li>it terminates a case in the <strong>switch</strong> statement (if-else);</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123; <span class="comment">// the condition to continue the loop</span></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123; <span class="comment">// the condition to perform break that stops this loop </span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    i--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Another trick using <code>break</code> to print pyramid:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">        System.out.print(j + <span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The output will be printed like:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">0 </span><br><span class="line">0 1 </span><br><span class="line">0 1 2 </span><br><span class="line">0 1 2 3 </span><br><span class="line">0 1 2 3 4 </span><br><span class="line">0 1 2 3 4 5 </span><br><span class="line">0 1 2 3 4 5 6 </span><br><span class="line">0 1 2 3 4 5 6 7 </span><br><span class="line">0 1 2 3 4 5 6 7 8 </span><br><span class="line">0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure><h3 id="continue-statement"><code>Continue</code> statement</h3><p>It causes a loop to <strong>skip</strong> the current iteration and go to the <strong>next one</strong>.</p><ul><li>inside the <strong>for-loop</strong>, the continue causes control to immediately move to the increment/decrement statement;</li><li>inside the <strong>while</strong> or <strong>do-while loop</strong>, control immediately moves to the condition.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The output will be like:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 2 4 6 8</span><br></pre></td></tr></table></figure><p>Which is in fact another realization of the counter condition:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; </span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>An interesting code for practice:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    <span class="keyword">if</span> (i &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;</span><br><span class="line">            System.out.println(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The visualized result can be accessed below:</p><p><a href="https://cscircles.cemc.uwaterloo.ca/java_visualize/#code=public+class+main%7B%0A+++public+static+void+main(String%5B%5D+args)%7B%0A+++for+(int+i+%3D+0%3B+i+%3C+5%3B+i%2B%2B)+%7B%0A++++System.out.println(i)%3B%0A++++if+(i+%3C+3)+%7B%0A++++++++continue%3B%0A++++%7D+else+%7B%0A++++++++for+(int+j+%3D+0%3B+j+%3C+5%3B+j%2B%2B)+%7B%0A++++++++++++System.out.println(j)%3B%0A++++++++%7D%0A++++%7D++++++++%0A%7D%7D%0A%7D&amp;mode=display&amp;curInstr=61" class="uri" target="_blank" rel="noopener">https://cscircles.cemc.uwaterloo.ca/java_visualize/#code=public+class+main%7B%0A+++public+static+void+main(String%5B%5D+args)%7B%0A+++for+(int+i+%3D+0%3B+i+%3C+5%3B+i%2B%2B)+%7B%0A++++System.out.println(i)%3B%0A++++if+(i+%3C+3)+%7B%0A++++++++continue%3B%0A++++%7D+else+%7B%0A++++++++for+(int+j+%3D+0%3B+j+%3C+5%3B+j%2B%2B)+%7B%0A++++++++++++System.out.println(j)%3B%0A++++++++%7D%0A++++%7D++++++++%0A%7D%7D%0A%7D&amp;mode=display&amp;curInstr=61</a></p><h2 id="defining-methods">Defining methods</h2><p>A method has.... (<strong>bolded</strong> elements are compulsory)</p><ol type="1"><li><strong>a set of modifiers</strong> (<code>public</code>, <code>static</code>, etc.);</li><li>a type of the return value;</li><li><strong>a name;</strong></li><li>a list of parameters (as well known as formal parameters) in parenthesis <code>()</code>;</li><li>a list of exceptions;</li><li><strong>a body</strong> containing statements to perform the operation.</li></ol><p>An example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The combination of the <strong>name</strong> of a method and its <strong>parameter types</strong> is called the <strong>signature</strong>. It doesn't include the returning type, modifiers, and names of parameters.</p><p>The considered method <code>sum</code> has the following signature <code>sum(int, int)</code>.</p><h3 id="naming-methods">Naming Methods</h3><p>a method name should be a <strong>legal identifier</strong> with following attributes:</p><ul><li>identifiers are case-sensitive;</li><li>an identifier can include Unicode letters, digits, and two special characters (<code>$</code>,<code>_</code>);</li><li>an identifier can't start with a digit;</li><li>identifiers must not be a keyword.</li></ul><h3 id="setting-returning-value-type-and-parameters">Setting returning value type and parameters</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printSum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    System.out.println(a + b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The code above prints the sum and returns no value due to <code>void</code>.</p><p>When you call a method with a value of <strong>a primitive type</strong> then a <strong>copy</strong> of the value is created. Inside a method, you can process this copy. If you change it, the passed argument is <strong>not changed.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">100</span>; <span class="comment">// 100</span></span><br><span class="line">    change(val); <span class="comment">// try to change val</span></span><br><span class="line">    System.out.println(val); <span class="comment">// it prints "100", because the method didn't change val, only its copy</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The method changes the given value</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    val = <span class="number">400</span>; <span class="comment">// here, the copy is 400</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;basic-terminology&quot;&gt;Basic Terminology&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Program&lt;/strong&gt; – a sequence of instructions (called statements), whic
      
    
    </summary>
    
    
      <category term="Java" scheme="http://www.isnowify.com/tags/Java/"/>
    
      <category term="Tutorial" scheme="http://www.isnowify.com/tags/Tutorial/"/>
    
  </entry>
  
  <entry>
    <title>Homebrew 安装不完全指北</title>
    <link href="http://www.isnowify.com/2020/09/17/a-simple-guide-to-install-homebrew/"/>
    <id>http://www.isnowify.com/2020/09/17/a-simple-guide-to-install-homebrew/</id>
    <published>2020-09-17T14:59:07.000Z</published>
    <updated>2020-09-17T15:48:55.086Z</updated>
    
    <content type="html"><![CDATA[<h3 id="why-homebrew">Why Homebrew？</h3><p>Homebrew官网 <a href="https://brew.sh/index_zh-cn" class="uri" target="_blank" rel="noopener">https://brew.sh/index_zh-cn</a> 对Homebrew的定义是：</p><blockquote><p><strong>macOS（或 Linux）缺失的软件包的管理器</strong></p></blockquote><p>Homebrew 类似于Linux上的yum与apt-get。有了Homebrew，你可以轻松使用进行以下操作：</p><ul><li>使用一句命令自动下载，安装或卸载所需要的软件与依赖包</li><li>轻松管理服务的停止与启动</li></ul><p>以CPT103课程需要用到的mysql为例，有了Homebrew，你只需要在终端中键入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mysql</span><br></pre></td></tr></table></figure><p>就可以一键完成mysql的下载与环境配置. Homebrew还会在安装结束时主动显示提示用户可能需要的下一步操作(caveats)。下图是使用Homebrew安装完mysql后现实的caveats，提示用户修改mysql的默认密码和启动服务的命令。</p><p><img data-src="https://i.loli.net/2020/09/17/b8ugkwcJ4sKhSf1.png"></p><p>于此同时，由于清华大学Tuna协会提供了Homebrew的国内高速镜像，因此替换完镜像后的Homebrew下载速度奇快，再也不需要通过魔法上网获取所需要的软件。</p><h3 id="how-to-install">How to install？</h3><h4 id="安装开发工具包">安装开发工具包</h4><p>首先需要确保你的Mac中已经安装好开发工具包，打开“系统实用工具”中的“终端”，在终端中输入 <code>xcode-select --install</code> ，系统会自动安装好缺少的开发工具。如果你遇到了下图的提示，说明你已经安装好了开发工具包，可以直接跳到下一步操作。</p><p>另外，由于Homebrew只能通过终端输入命令进行交互，因此建议把终端放在Dock栏中，以便快速打开。</p><p><img data-src="https://i.loli.net/2020/09/17/MblJGVqjnZwg5dp.png"></p><h4 id="安装homebrew">安装Homebrew</h4><p>如果你会魔法⚡⚡，或者身在国际互联网畅通无阻的国家，你可以直接在终端中键入Homebrew官方的命令进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><p>如果你只是一只<del>还没有写完作业的</del>苦逼学生，你可能需要使用国内镜像进行快速安装，小猿提供了修改后的脚本，让你可以使用位于Tuna清华大学的服务器下载安装Homebrew，以下是食用方式：</p><ol type="1"><li><p>使用浏览器下载这个文件： <a href="https://gitee.com/isnowify/xjtluxiaoyuan/raw/master/installbrew.sh" class="uri" target="_blank" rel="noopener">https://gitee.com/isnowify/xjtluxiaoyuan/raw/master/installbrew.sh</a></p></li><li><p>在终端中输入以下命令（留意最后的空格）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HOMEBREW_CORE_GIT_REMOTE=https://mirrors.tuna.tsinghua.edu.cn/git/Homebrew/Homebrew-core.git bash</span><br></pre></td></tr></table></figure><p>并将刚刚下载好的文件拖入终端内</p></li></ol><p>按下回车键，终端便开始<del>腹泻式</del>安装Homebrew，期间可能会需要输入你的Mac密码，按照提示操作即可。我们录制了一个小小的GIF，帮助你更好的完成Homebrew的安装</p><p><img data-src="https://i.loli.net/2020/09/17/wbpk7x6Ff8Ns5Py.gif"></p><p>耐心等待一会，当我们看到<code>Installation successful</code>, 说明Homebrew已经成功安装。</p><h3 id="替换homebrew下载源">替换Homebrew下载源</h3><p>安装好Homebrew以后，我们需要替换Homebrew的下载源，让Homebrew下载软件包的速度<del>比香港记者还快</del>。</p><h4 id="替换bottle源">替换bottle源</h4><p>依次在终端中输入以下两行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/Homebrew-bottles'</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><h4 id="替换core与cask源">替换core与cask源</h4><p>依次逐行键入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># brew 程序本身，Homebrew/Linuxbrew 相同</span></span><br><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo)</span>"</span> remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/Homebrew/brew.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下针对 mac OS 系统上的 Homebrew</span></span><br><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo Homebrew/core)</span>"</span> remote <span class="built_in">set</span>-url origin </span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/git/Homebrew/Homebrew-core.git</span><br><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo Homebrew/cask)</span>"</span> remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/Homebrew/Homebrew-cask.git</span><br><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo Homebrew/cask-fonts)</span>"</span> remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/Homebrew/Homebrew-cask-fonts.git</span><br><span class="line">git -C <span class="string">"<span class="variable">$(brew --repo Homebrew/cask-drivers)</span>"</span> remote <span class="built_in">set</span>-url origin https://mirrors.tuna.tsinghua.edu.cn/git/Homebrew/Homebrew-cask-drivers.git</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更换后测试工作是否正常</span></span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><p>至此，我们完成了Homebrew的下载，安装与源替换。</p><h3 id="一些常用命令">一些常用命令</h3><h4 id="安装卸载软件">1.安装卸载软件</h4><ol type="1"><li><code>brew --version</code>或者<code>brew -v</code> 显示brew版本信息</li><li><code>brew install &lt;name&gt;</code> 安装指定软件</li><li><code>brew unistall &lt;name&gt;</code> 卸载指定软件</li><li><code>brew list</code> 显示所有的已安装的软件</li><li><code>brew search text</code> 搜索本地远程仓库的软件，已安装会显示绿色的勾</li><li><code>brew search /text/</code> 使用正则表达式搜软件</li></ol><h4 id="升级软件相关">2. 升级软件相关</h4><ol type="1"><li><code>brew update</code> 自动升级Homebrew（从github下载最新版本）</li><li><code>brew outdated</code> 检测已经过时的软件</li><li><code>brew upgrade</code> 升级所有已过时的软件，即列出的以过时软件</li><li><code>brew upgrade &lt;formula&gt;</code>升级指定的软件</li><li><code>brew pin &lt;formula&gt;</code> 禁止指定软件升级</li><li><code>brew unpin &lt;formula&gt;</code> 解锁禁止升级</li><li><code>brew upgrade --all</code> 升级所有的软件包，包括未清理干净的旧版本的包</li></ol><h4 id="清理相关">3. 清理相关</h4><p>Homebrew再升级软件时候不会清理相关的旧版本，在软件升级后我们可以使用如下命令清理</p><ol type="1"><li><p><code>brew cleanup -n</code> 列出需要清理的内容</p></li><li><p><code>brew cleanup &lt;formula&gt;</code> 清理指定的软件过时包</p></li><li><p><code>brew cleanup</code> 清理所有的过时软件</p></li><li><p><code>brew unistall &lt;formula&gt;</code> 卸载指定软件</p></li><li><p><code>brew unistall &lt;fromula&gt; --force</code> 彻底卸载指定软件，包括旧版本</p></li></ol><h3 id="写在最后">写在最后</h3><p>这篇文章也可以在<a href="https://isnowify.com" class="uri" target="_blank" rel="noopener">https://isnowify.com</a>上找到，更加适合电脑端阅读。</p><h3 id="reference">Reference</h3><ol type="1"><li>Homebrew 替换国内镜像源 <a href="https://frankindev.com/2020/05/15/replace-Homebrew-source/" class="uri" target="_blank" rel="noopener">https://frankindev.com/2020/05/15/replace-Homebrew-source/</a></li><li>HomeBrew常规使用教程： <a href="https://juejin.im/post/6844903549051076622" class="uri" target="_blank" rel="noopener">https://juejin.im/post/6844903549051076622</a></li><li>Homebrew官网： <a href="https://brew.sh/index_zh-cn" class="uri" target="_blank" rel="noopener">https://brew.sh/index_zh-cn</a></li><li>清华大学Tuna镜像源Homebrew页面：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/Homebrew/" class="uri" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/help/Homebrew/</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;why-homebrew&quot;&gt;Why Homebrew？&lt;/h3&gt;
&lt;p&gt;Homebrew官网 &lt;a href=&quot;https://brew.sh/index_zh-cn&quot; class=&quot;uri&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;htt
      
    
    </summary>
    
    
      <category term="西浦小猿" scheme="http://www.isnowify.com/tags/%E8%A5%BF%E6%B5%A6%E5%B0%8F%E7%8C%BF/"/>
    
      <category term="Homebrew" scheme="http://www.isnowify.com/tags/Homebrew/"/>
    
      <category term="Mac" scheme="http://www.isnowify.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>Java 随缘杂谈</title>
    <link href="http://www.isnowify.com/2020/09/10/java-on-the-go/"/>
    <id>http://www.isnowify.com/2020/09/10/java-on-the-go/</id>
    <published>2020-09-10T02:39:29.000Z</published>
    <updated>2020-09-29T17:04:13.009Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-随缘杂谈">Java 随缘杂谈</h1><blockquote><p>小猿排版大升级！</p></blockquote><p>CPT 105 第一周的课时已经差不多结束了，小猿根据一些同学提的问题写了这篇杂谈。这个系列是根据 CPT105 的教学进度以及同学提问而写的技术向杂谈，一到两周一更，比较随性，不成系统。以后的更新将以专题为主。</p><p>在阅读本文之前请先仔细阅读 CPT105 Tutorial以及课件, 并且观看课程视频。</p><h3 id="jdk-jre-jvm">JDK, JRE, JVM</h3><p>你可能会对这三个名词感到有些糊涂，先给结论: JDK 包含 JRE ，JRE 包含 JVM</p><p>JDK: Java Development Kit Java开发工具包，提供了Java运行环境和Java开发工具</p><p>JRE: Java Runtime Environment Java运行时环境，安装了JavaRE 的设备可以运行Java程序</p><p>JVM: Java Virtual Machine Java虚拟机，Java代码事实上运行在JVM中。JVM是Java跨平台特性实现的载体，Java的核心竞争力所在，这里不铺开讲。有兴趣的自行百度。</p><h3 id="java-程序的组织结构">Java 程序的组织结构</h3><p>Java中的源文件以 项目(project) - 包(package) - 源文件(.java文件) 的层级结构组织起来，我们就是在源文件里敲代码。</p><p><img data-src="https://i.loli.net/2020/09/11/Gxa4O5psATQXENn.jpg"></p><h3 id="类-class-和-.java-文件的关系">类 (class) 和 .java 文件的关系</h3><p>现阶段可以暂时认为一个.java 文件就是一个 class</p><p>作为一门面向对象编程 (OOP) 的语言，Java中的<strong>一切</strong>依托于类存在</p><p><img data-src="https://i.loli.net/2020/09/11/uyZN6bl4RIG9BDn.png"></p><h3 id="方法-method">方法 method</h3><p>方法分为数个部分：修饰符，返回类型，方法签名 (method signature) 和方法体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">访问权限修饰符 是否为静态方法 返回值类型 方法名称(参数表)</span><br><span class="line">&#123;</span><br><span class="line"> 方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello\nWorld"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中方法签名包含了方法名称和参数表。方法的创建和调用应该会在下周学到，不用操之过急，这里只给一个基本的概念。</p><h3 id="变量-variable">变量 (variable)</h3><h3 id="可执行java程序-主类-main-class"><strong>可执行</strong>Java程序 &amp; 主类 (main class)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//my code</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main()方法 (method) 是java程序执行的起点，所有含有main()方法的java源文件都是可执行(run)的。</p><p>NetBeans 提供两种执行模式，一是单独执行当前源文件( 前提是当前源文件中含有main()方法 ):</p><p><img data-src="https://i.loli.net/2020/09/11/L51Flvdqk2KCQ3Z.png"></p><p>另一种是执行当前项目:</p><p><img data-src="https://i.loli.net/2020/09/11/uFo3LBv6jpAiYUd.png"></p><p>项目的执行从当前项目的主类 (main class) 的 main()方法开始，Run Project之后的括号里就注明了当前的主类(Lab_01).</p><p>所有含有main()方法的源文件都有资格成为主类，而相应的，<strong>在执行项目时，只有主类的 main() 方法会被执行。</strong></p><p><strong>NetBeans 中如何修改主类</strong>:</p><p><img data-src="https://i.loli.net/2020/09/11/wT37JEVWAslxPHb.png"></p><p><img data-src="https://i.loli.net/2020/09/11/vdeslbTSH92zQJ8.png"></p><p>点击Browse便可以查看所有有资格成为主类的类,并自定义主类</p><p>Java中变量有八个基本类型:</p><p>整数类型：int (整型), long（长整型）, short（短整型）, byte (字节)</p><p>字符类型：char</p><p>布尔量：boolean</p><p>浮点数（小数）: float（单精度浮点类型）, double（双精度浮点类型）</p><p>数据类型属于编程基础，但是内容又比较多，过两天专门写一篇文章讲吧(咕咕咕)。</p><p>变量需要定义，定义后的变量可以赋值，同名变量不可以重复定义，变量有生存期和作用域。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num1 = <span class="number">2</span>;<span class="comment">//定义</span></span><br><span class="line"><span class="keyword">int</span> num2 = <span class="number">3</span>;<span class="comment">//定义</span></span><br><span class="line">num1 = <span class="number">10</span>; <span class="comment">//赋值</span></span><br><span class="line">num1 = num2; <span class="comment">//赋值</span></span><br></pre></td></tr></table></figure><p><strong>生存期</strong>和<strong>作用域</strong>以及相关的<strong>变量类型</strong>过两天专门写一篇文章讲(咕咕咕)。</p><h3 id="system.out.println">System.out.println()</h3><p><code>System.out.println()</code>是标准输出家族中常用的方法之一。其作用是在<code>output console</code>中输出括号中的内容并换行，如果要输出文本内容，记得加双引号。</p><p><code>System.out.print()</code>一样会输出括号中的内容，但是不会自动换行。</p><p>手动换行的方式是在文本中插入 , 有兴趣的可以百度逃逸字符自行了解。</p><p>可以运行 <code>System.out.print("Hello\nWorld");</code></p><h3 id="用-连接文本">用 + 连接文本</h3><p>加号是Java唯一的重载运算符, 可以用来链接文本内容，在Java中，我们称文本内容为字符串 (String)，当加号和字符串相邻出现时，会自动调用重载后的功能。</p><p>可以运行下面的语句体会与字符串一起使用时+号的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"6"</span> + <span class="string">"3"</span>);</span><br><span class="line">System.out.println(<span class="string">"6"</span> + <span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="number">6</span> + <span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="从源文件到可执行文件">从源文件到可执行文件</h3><p>本周 CPT105 的教案中提及了<code>.java</code> 文件和 <code>.class</code> 文件。编程语言更接近人类的自然语言，计算机是无法"理解"的，计算机 (cpu) 只能"理解"二进制指令。编程语言发展至今，已经在二进制语言的基础上进行了多层抽象，全然见不到二进制指令的影子了，因此人机之间需要"翻译者"，这个"翻译者"就是编译器，而翻译的过程就称为编译 (compile)。<code>.class</code> 文件可以简单理解为 <code>.java</code> 文件经过翻译后的产物。</p><p>而事实上，<code>.class</code>文件被称作字节码(byte code)，是提供给JVM执行的。</p><h3 id="运算">运算</h3><p>编程语言中的运算符分为单目运算符，双目运算符，以及三元运算符</p><p>基本的: + 加 - 减 *乘 /除 %取余</p><p>自增自减运算符(单目): ++ ，--</p><p><code>a++</code> 等价于 <code>a = a+1</code>， <code>a--</code> 等价于 <code>a = a-1</code></p><p>逻辑运算符: &gt;, &lt;, &gt;=, &lt;=, &amp;&amp;, ||</p><p>按位运算: &lt;&lt; 左移 &gt;&gt; 右移 ^ 按位异或 &amp;按位与 | 按位或</p><h3 id="独自探索java">独自探索java</h3><p><a href="https://docs.oracle.com/en/java/javase/12/docs/api/index.html" class="uri" target="_blank" rel="noopener">https://docs.oracle.com/en/java/javase/12/docs/api/index.html</a></p><p>这是Java官方的API文档，可能你现在看不懂他，但是在未来他必然会成为你的良师益友。想要自主学习Java的同学可以选择 《Java核心技术 卷 1》，或者观看B站，Mooc等平台的课程。</p><blockquote><p>马上百粉啦，小猿正在给各位老粉整理 pdf 教材作为福利，现在关注你也是老粉！</p><p>有任何问题可以在后台给小猿留言。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-随缘杂谈&quot;&gt;Java 随缘杂谈&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;小猿排版大升级！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;CPT 105 第一周的课时已经差不多结束了，小猿根据一些同学提的问题写了这篇杂谈。这个系列是根据 CPT105
      
    
    </summary>
    
    
      <category term="西浦小猿" scheme="http://www.isnowify.com/tags/%E8%A5%BF%E6%B5%A6%E5%B0%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="http://www.isnowify.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.isnowify.com/2019/08/20/hello-world/"/>
    <id>http://www.isnowify.com/2019/08/20/hello-world/</id>
    <published>2019-08-20T03:15:01.305Z</published>
    <updated>2019-08-06T13:33:01.675Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
