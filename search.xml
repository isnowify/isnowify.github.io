<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2019/08/20/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Java 随缘杂谈</title>
    <url>/2020/09/10/java-on-the-go/</url>
    <content><![CDATA[<h1 id="java-随缘杂谈">Java 随缘杂谈</h1>
<blockquote>
<p>小猿排版大升级！</p>
</blockquote>
<p>CPT 105 第一周的课时已经差不多结束了，小猿根据一些同学提的问题写了这篇杂谈。这个系列是根据 CPT105 的教学进度以及同学提问而写的技术向杂谈，一到两周一更，比较随性，不成系统。以后的更新将以专题为主。</p>
<p>在阅读本文之前请先仔细阅读 CPT105 Tutorial以及课件, 并且观看课程视频。</p>
<h3 id="jdk-jre-jvm">JDK, JRE, JVM</h3>
<p>你可能会对这三个名词感到有些糊涂，先给结论: JDK 包含 JRE ，JRE 包含 JVM</p>
<p>JDK: Java Development Kit Java开发工具包，提供了Java运行环境和Java开发工具</p>
<p>JRE: Java Runtime Environment Java运行时环境，安装了JavaRE 的设备可以运行Java程序</p>
<p>JVM: Java Virtual Machine Java虚拟机，Java代码事实上运行在JVM中。JVM是Java跨平台特性实现的载体，Java的核心竞争力所在，这里不铺开讲。有兴趣的自行百度。</p>
<h3 id="java-程序的组织结构">Java 程序的组织结构</h3>
<p>Java中的源文件以 项目(project) - 包(package) - 源文件(.java文件) 的层级结构组织起来，我们就是在源文件里敲代码。</p>
<p><img data-src="https://i.loli.net/2020/09/11/Gxa4O5psATQXENn.jpg"></p>
<h3 id="类-class-和-.java-文件的关系">类 (class) 和 .java 文件的关系</h3>
<p>现阶段可以暂时认为一个.java 文件就是一个 class</p>
<p>作为一门面向对象编程 (OOP) 的语言，Java中的<strong>一切</strong>依托于类存在</p>
<p><img data-src="https://i.loli.net/2020/09/11/uyZN6bl4RIG9BDn.png"></p>
<h3 id="方法-method">方法 method</h3>
<p>方法分为数个部分：修饰符，返回类型，方法签名 (method signature) 和方法体</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">访问权限修饰符 是否为静态方法 返回值类型 方法名称(参数表)</span><br><span class="line">&#123;</span><br><span class="line"> 方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	System.out.println(<span class="string">"Hello\nWorld"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中方法签名包含了方法名称和参数表。方法的创建和调用应该会在下周学到，不用操之过急，这里只给一个基本的概念。</p>
<h3 id="变量-variable">变量 (variable)</h3>
<h3 id="可执行java程序-主类-main-class"><strong>可执行</strong>Java程序 &amp; 主类 (main class)</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//my code</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>main()方法 (method) 是java程序执行的起点，所有含有main()方法的java源文件都是可执行(run)的。</p>
<p>NetBeans 提供两种执行模式，一是单独执行当前源文件( 前提是当前源文件中含有main()方法 ):</p>
<p><img data-src="https://i.loli.net/2020/09/11/L51Flvdqk2KCQ3Z.png"></p>
<p>另一种是执行当前项目:</p>
<p><img data-src="https://i.loli.net/2020/09/11/uFo3LBv6jpAiYUd.png"></p>
<p>项目的执行从当前项目的主类 (main class) 的 main()方法开始，Run Project之后的括号里就注明了当前的主类(Lab_01).</p>
<p>所有含有main()方法的源文件都有资格成为主类，而相应的，<strong>在执行项目时，只有主类的 main() 方法会被执行。</strong></p>
<p><strong>NetBeans 中如何修改主类</strong>:</p>
<p><img data-src="https://i.loli.net/2020/09/11/wT37JEVWAslxPHb.png"></p>
<p><img data-src="https://i.loli.net/2020/09/11/vdeslbTSH92zQJ8.png"></p>
<p>点击Browse便可以查看所有有资格成为主类的类,并自定义主类</p>
<p>Java中变量有八个基本类型:</p>
<p>整数类型：int (整型), long（长整型）, short（短整型）, byte (字节)</p>
<p>字符类型：char</p>
<p>布尔量：boolean</p>
<p>浮点数（小数）: float（单精度浮点类型）, double（双精度浮点类型）</p>
<p>数据类型属于编程基础，但是内容又比较多，过两天专门写一篇文章讲吧(咕咕咕)。</p>
<p>变量需要定义，定义后的变量可以赋值，同名变量不可以重复定义，变量有生存期和作用域。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num1 = <span class="number">2</span>;<span class="comment">//定义</span></span><br><span class="line"><span class="keyword">int</span> num2 = <span class="number">3</span>;<span class="comment">//定义</span></span><br><span class="line">num1 = <span class="number">10</span>; <span class="comment">//赋值</span></span><br><span class="line">num1 = num2; <span class="comment">//赋值</span></span><br></pre></td></tr></table></figure>
<p><strong>生存期</strong>和<strong>作用域</strong>以及相关的<strong>变量类型</strong>过两天专门写一篇文章讲(咕咕咕)。</p>
<h3 id="system.out.println">System.out.println()</h3>
<p><code>System.out.println()</code>是标准输出家族中常用的方法之一。其作用是在<code>output console</code>中输出括号中的内容并换行，如果要输出文本内容，记得加双引号。</p>
<p><code>System.out.print()</code>一样会输出括号中的内容，但是不会自动换行。</p>
<p>手动换行的方式是在文本中插入 , 有兴趣的可以百度逃逸字符自行了解。</p>
<p>可以运行 <code>System.out.print("Hello\nWorld");</code></p>
<h3 id="用-连接文本">用 + 连接文本</h3>
<p>加号是Java唯一的重载运算符, 可以用来链接文本内容，在Java中，我们称文本内容为字符串 (String)，当加号和字符串相邻出现时，会自动调用重载后的功能。</p>
<p>可以运行下面的语句体会与字符串一起使用时+号的功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"6"</span> + <span class="string">"3"</span>);</span><br><span class="line">System.out.println(<span class="string">"6"</span> + <span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="number">6</span> + <span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<h3 id="从源文件到可执行文件">从源文件到可执行文件</h3>
<p>本周 CPT105 的教案中提及了<code>.java</code> 文件和 <code>.class</code> 文件。编程语言更接近人类的自然语言，计算机是无法"理解"的，计算机 (cpu) 只能"理解"二进制指令。编程语言发展至今，已经在二进制语言的基础上进行了多层抽象，全然见不到二进制指令的影子了，因此人机之间需要"翻译者"，这个"翻译者"就是编译器，而翻译的过程就称为编译 (compile)。<code>.class</code> 文件可以简单理解为 <code>.java</code> 文件经过翻译后的产物。</p>
<p>而事实上，<code>.class</code>文件被称作字节码(byte code)，是提供给JVM执行的。</p>
<h3 id="运算">运算</h3>
<p>编程语言中的运算符分为单目运算符，双目运算符，以及三元运算符</p>
<p>基本的: + 加 - 减 *乘 /除 %取余</p>
<p>自增自减运算符(单目): ++ ，--</p>
<p><code>a++</code> 等价于 <code>a = a+1</code>， <code>a--</code> 等价于 <code>a = a-1</code></p>
<p>逻辑运算符: &gt;, &lt;, &gt;=, &lt;=, &amp;&amp;, ||</p>
<p>按位运算: &lt;&lt; 左移 &gt;&gt; 右移 ^ 按位异或 &amp;按位与 | 按位或</p>
<h3 id="独自探索java">独自探索java</h3>
<p>https://docs.oracle.com/en/java/javase/12/docs/api/index.html</p>
<p>这是Java官方的API文档，可能你现在看不懂他，但是在未来他必然会成为你的良师益友。想要自主学习Java的同学可以选择 《Java核心技术 卷 1》，或者观看B站，Mooc等平台的课程。</p>
<blockquote>
<p>马上百粉啦，小猿正在给各位老粉整理 pdf 教材作为福利，现在关注你也是老粉！</p>
<p>有任何问题可以在后台给小猿留言。</p>
</blockquote>
]]></content>
      <tags>
        <tag>西浦小猿</tag>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
